#!/usr/bin/env php
<?php

// vim: set expandtab tabstop=4 shiftwidth=4 syntax=php:

require_once 'climax/CLImax.php';

class Comice_Pear_Config
{
    /**
     * @var string Path to the php executable
     */
    protected $php_bin;
    /**
     * @var string Path to the pear bin directory
     */
    protected $bin_dir;
    /**
     * @var string Path to the pear-managed php code dir
     */
    protected $php_dir;
    /**
     * @var string The path to the pearrc
     */
    protected $pearrc;

    public function __construct()
    {
        $this->pearrc = $this->locatePearrc(getcwd());

        $this->php_bin = $this->pearConfigGet('php_bin');
        $this->bin_dir = $this->pearConfigGet('bin_dir');
        $this->php_dir = $this->pearConfigGet('php_dir');
    }

    public function getPearrc()
    {
        return $this->pearrc;
    }

    public function getPhpBin()
    {
        return $this->php_bin;
    }

    public function getBinDir()
    {
        return $this->bin_dir;
    }

    public function getPhpDir()
    {
        return $this->php_dir;
    }

    public function getPearrcEscaped()
    {
        return str_replace(' ', '\\ ', $this->getPearrc());
    }

    public function getPhpBinEscaped()
    {
        return str_replace(' ', '\\ ', $this->getPhpBin());
    }

    public function getBinDirEscaped()
    {
        return str_replace(' ', '\\ ', $this->getBinDir());
    }

    public function getPhpDirEscaped()
    {
        return str_replace(' ', '\\ ', $this->getPhpDir());
    }

    protected function locatePearrc($fromDir)
    {
        if (!is_dir($fromDir)) throw new Exception("locatePearrc({$fromDir}) is not a directory.");

        // Find .pearrc
        $possiblePearrcLocations = array(
            '.',
            'conf',
            'config',
        );

        // If we don't find a .pearrc we'll use system pear
        $pearrcLocation = NULL;

        // Walk up from passed dir to find .pearrc in one of the possible locations
        // If we get to / or we find a .pearrc then stop looking
        $pathComponents = array_filter(explode('/', $fromDir));
        $found = false;
        while (!empty($pathComponents) and !$found)
        {
            $dir = '/' . implode('/', $pathComponents);

            foreach ($possiblePearrcLocations as $location)
            {
                $pathToCheck = "{$dir}/{$location}/.pearrc";
                if (file_exists($pathToCheck))
                {
                    $pearrcLocation = realpath($pathToCheck);
                    $found = true;
                    break;
                }
            }

            array_pop($pathComponents);
        }

        return $pearrcLocation;
    }

    public function getPearPearrcArg()
    {
        if (!$this->pearrc) return NULL;
        return " -c {$this->getPearrcEscaped()} ";
    }

    public function pearConfigGet($config)
    {
        $cmd = "pear {$this->getPearPearrcArg()} config-get {$config}";
        exec($cmd, $output, $statusCode);
        if ($statusCode !== 0) throw new Exception("Error getting {$config} from pear, got error code {$statusCode}.");
        if (!is_array($output) or count($output) !== 1) throw new Exception("Unexpected output from {$cmd}\n" . join("\n", $output));

        return $output[0];
    }
}

class Comice_Exec extends CLIMax_BaseCommand
{
    public function run($arguments, CLImaxController $cliController)
    {
        $pearconfig = new Comice_Pear_Config;
        $pearrc     = $pearconfig->getPearrcEscaped();
        $quiet      = $cliController->getEnvironment('quiet');
        if ($pearrc)
        {
            if (!$quiet) print("Using .pearrc at: {$pearrc}\n");
        } else {
            if (!$quiet) print("Warning: could not find a .pearrc, using system pear.\n");
        }

        // Set $PEARRC environment variable and run the command
        // NOTE: I *swear* we saw that PEARRC did something useful but I can no longer find docs for it.
        //putenv("PEARRC={$pearrc}");

        // Extract arguments
        $executable         = array_shift($arguments);
        $fullExecutablePath = "{$pearconfig->getBinDirEscaped()}/{$executable}";
        $arguments          = implode(' ', $arguments);
        if ($executable === NULL) throw new Exception("comice exec requires a command. If you're trying to 'comice exec pear ...', simply run 'comice pear ...'");

        // Read the shebang to see whether we're executing a php file
        if (!file_exists($fullExecutablePath)) throw new CLImaxCommand_ArugumentException("There is no pear-installed executable at {$fullExecutablePath}.");
        $isPhpExecutable = exec("head -1 {$fullExecutablePath} | grep '^#!.*php\$'");

        // Build our command
        $command = NULL;
        if ($isPhpExecutable)
        {
            // Run the php command with the correct include path
            $command = "{$pearconfig->getPhpBinEscaped()} -d include_path={$pearconfig->getPhpDirEscaped()} {$fullExecutablePath} {$arguments} 2>&1";
        } else if ($executable == 'pear' && $pearrc) {
            // Substitute in our pearrc
            $command = "{$fullExecutablePath} -c {$pearrc} {$arguments} 2>&1";
        } else {
            // Set up environment variables
            $environmentVariables = array(
                'PHP_BIN',          // Canonical. Use this if at all possible.
                'PHP_PEAR_PHP_BIN', // Pecl/Pear
                'PHP_COMMAND',      // Phing
            );
            foreach ($environmentVariables as $environmentVar)
            {
                putenv("{$environmentVar}={$pearconfig->getPhpBinEscaped()} -d include_path={$pearconfig->getPhpDirEscaped()}");
            }

            // Just execute the command and pray that an
            // environment variable set up the include path
            // correctly
            $command = "{$fullExecutablePath} {$arguments} 2>&1";
        }

        // Run the command in the appropriate context
        if ($quiet)
        {
            // Exec buffers output to $output (instead of STDOUT and STDERR)
            exec($command, $output, $returnCode);
        } else {
            // Passthru still sends output to STDOUT and STDERR
            passthru($command, $returnCode);
        }

        // Return the return code of the `$phpBin -d ...` command from above
        return $returnCode;
    }

    public function getDescription($aliases, $argLinker) {
        return 'Execute a command scoped to the appropriate pear context.';
    }
}

class Comice_Pear extends CLIMax_BaseCommand
{
    public function run($arguments, CLImaxController $cliController)
    {
        $pearconfig = new Comice_Pear_Config;

        // Extract arguments
        $fullExecutablePath = "{$pearconfig->getBinDirEscaped()}/pear";
        array_unshift($arguments, $pearconfig->getPearPearrcArg());
        $arguments = implode(' ', $arguments);

        // Set up environment variables
        putenv("PHP_PEAR_INSTALL_DIR={$pearconfig->getPhpDirEscaped()}");
        putenv("PHP_PEAR_PHP_BIN={$pearconfig->getPhpBinEscaped()}");

        $command = "{$fullExecutablePath} {$arguments} 2>&1";
        passthru($command, $returnCode);

        // Return the return code of the `$phpBin -d ...` command from above
        return $returnCode;
    }

    public function getDescription($aliases, $argLinker) {
        return 'Manage a PEAR sandbox without having to juggle paths or conf files.';
    }
}
class Comice_PearInit extends CLIMax_BaseCommand
{
    public function run($arguments, CLImaxController $cliController)
    {
        $pearconfig = new Comice_Pear_Config;

        @list($externalsDir, $pearrc) = $arguments;
        if (!$pearrc)
        {
            $pearrc = getcwd() . "/.pearrc";
        }
        if (!$externalsDir)
        {
            $externalsDir = getcwd() . "/externals";
        }
        $pearrc = str_replace(' ', '\\ ', $pearrc);
        $externalsDir = str_replace(' ', '\\ ', $externalsDir);

        if (!file_exists($externalsDir))
        {
            $ok = mkdir($externalsDir, 0755, true);
            if ($ok === false) throw new Exception("Couldn't initialize {$externalsDir}");
        }

        // Extract arguments
        array_unshift($arguments, $pearconfig->getPearPearrcArg());

        // Set up environment variables
        putenv("PHP_PEAR_INSTALL_DIR={$pearconfig->getPhpDirEscaped()}");
        putenv("PHP_PEAR_PHP_BIN={$pearconfig->getPhpBinEscaped()}");

        $command = "{$pearconfig->getBinDirEscaped()}/pear {$pearconfig->getPearPearrcArg()} config-create {$externalsDir} {$pearrc} 2>&1";
        passthru($command, $returnCode);
        if ($returnCode !== 0) throw new Exception("Error running {$command}");

        $bootstrapCommands = array(
            "install -o PEAR",
            "upgrade PEAR",
            "config-set auto_discover 1"
            );
        foreach ($bootstrapCommands as $cmd) {
            $command = "{$pearconfig->getBinDirEscaped()}/pear -c {$pearrc} {$cmd} 2>&1";
            passthru($command, $returnCode);
            if ($returnCode !== 0) throw new Exception("Error running {$command}");
        }

        return 0;
    }

    public function getDescription($aliases, $argLinker) {
        return 'Initialize a PEAR sandbox: comice pear-init [externals-dir location] [pearrc location]';
    }
}

class Comice_Install extends CLIMax_BaseCommand
{

    public function run($arguments, CLImaxController $cliController)
    {
        // Find Pearfile by walking up cwd
        $pearfilePath = Comice::findFileByWalkingUpDirectoryTree('Pearfile');

        // php-require Pearfile so it gets executed
        require $pearfilePath;

        return 0;
    }

}

class Comice
{

    public static function findFileByWalkingUpDirectoryTree($filename, $possibleLocations = array('.'))
    {
        $fileLocation   = NULL;
        $pwd            = getcwd();
        $pathComponents = array_filter(explode('/', $pwd));

        while (!empty($pathComponents))
        {
            $dir = '/' . implode('/', $pathComponents);

            foreach ($possibleLocations as $location)
            {
                $pathToCheck = "{$dir}/{$location}/{$filename}";
                if (file_exists($pathToCheck)) $fileLocation = realpath($pathToCheck);
            }

            if ($fileLocation) break;
            array_pop($pathComponents);
        }

        return $fileLocation;
    }

    public static function install($packages)
    {
        foreach ($packages as $package)
        {
            // Derive package name
            $packageName = self::_getPackageName($package);

            // Check whether package is installed
            passthru("comice -q pear list {$packageName}", $result);
            $installed = $result == 0;
            if ($installed)
            {
                print("Using {$packageName}\n");
                continue;
            }

            // Install it if it is not already installed
            print("Installing {$packageName}\n");
            $package = new Comice_Exec();
            $result = $package->run(
                array('pear', 'install', $packageName, '2>&1'),
                new CLImaxController
            );
            if ($result !== 0) throw new Exception("Error installing {$packageName}");
        }
    }

    private static function _getPackageName($package)
    {
        if (!is_array($package)) return $package;
        if (!isset($package['package'])) throw new Exception("Please specificy a package name: " . print_r($package, true));
        if (isset($package['channel']) && isset($package['version'])) return "{$package['channel']}/{$package['package']}-{$package['version']}";
        if (isset($package['channel'])) return "{$package['channel']}/{$package['package']}";
        if (isset($package['version'])) return "{$package['package']}-{$package['version']}";
        return $package['package'];
    }

}

CLImaxController::create()
    ->addCommand(new Comice_Exec, array('exec'))
    ->addCommand(new Comice_Pear, array('pear'))
    ->addCommand(new Comice_PearInit, array('pear-init'))
    ->addCommand(new Comice_Install, array('install'))
    ->addEnvironmentFlagSetsValue(
        'quiet',                            // Argument name
        true,                               // Value if flag is used
        array('-q', '--quiet')              // Aliases
    )
    ->run($argv, $argc);
